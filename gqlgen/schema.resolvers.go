package gqlgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"vsc-node/modules/gql/gqlgen"
)

// ContractStateDiff is the resolver for the contractStateDiff field.
func (r *queryResolver) ContractStateDiff(ctx context.Context, id *string) (*gqlgen.ContractDiff, error) {
	panic(fmt.Errorf("not implemented: ContractStateDiff - contractStateDiff"))
}

// ContractState is the resolver for the contractState field.
func (r *queryResolver) ContractState(ctx context.Context, id *string) (*gqlgen.ContractState, error) {
	panic(fmt.Errorf("not implemented: ContractState - contractState"))
}

// FindTransaction is the resolver for the findTransaction field.
func (r *queryResolver) FindTransaction(ctx context.Context, filterOptions *gqlgen.FindTransactionFilter, decodedFilter *string) (*gqlgen.FindTransactionResult, error) {
	panic(fmt.Errorf("not implemented: FindTransaction - findTransaction"))
}

// FindContractOutput is the resolver for the findContractOutput field.
func (r *queryResolver) FindContractOutput(ctx context.Context, filterOptions *gqlgen.FindContractOutputFilter, decodedFilter *string) (*gqlgen.FindContractOutputResult, error) {
	panic(fmt.Errorf("not implemented: FindContractOutput - findContractOutput"))
}

// FindLedgerTXs is the resolver for the findLedgerTXs field.
func (r *queryResolver) FindLedgerTXs(ctx context.Context, filterOptions *gqlgen.LedgerTxFilter) (*gqlgen.LedgerResults, error) {
	panic(fmt.Errorf("not implemented: FindLedgerTXs - findLedgerTXs"))
}

// GetAccountBalance is the resolver for the getAccountBalance field.
func (r *queryResolver) GetAccountBalance(ctx context.Context, account *string) (*gqlgen.GetBalanceResult, error) {
	panic(fmt.Errorf("not implemented: GetAccountBalance - getAccountBalance"))
}

// FindContract is the resolver for the findContract field.
func (r *queryResolver) FindContract(ctx context.Context, id *string) (*gqlgen.FindContractResult, error) {
	panic(fmt.Errorf("not implemented: FindContract - findContract"))
}

// SubmitTransactionV1 is the resolver for the submitTransactionV1 field.
func (r *queryResolver) SubmitTransactionV1(ctx context.Context, tx string, sig string) (*gqlgen.TransactionSubmitResult, error) {
	panic(fmt.Errorf("not implemented: SubmitTransactionV1 - submitTransactionV1"))
}

// GetAccountNonce is the resolver for the getAccountNonce field.
func (r *queryResolver) GetAccountNonce(ctx context.Context, keyGroup []*string) (*gqlgen.AccountNonceResult, error) {
	panic(fmt.Errorf("not implemented: GetAccountNonce - getAccountNonce"))
}

// LocalNodeInfo is the resolver for the localNodeInfo field.
func (r *queryResolver) LocalNodeInfo(ctx context.Context) (*gqlgen.LocalNodeInfo, error) {
	panic(fmt.Errorf("not implemented: LocalNodeInfo - localNodeInfo"))
}

// WitnessNodes is the resolver for the witnessNodes field.
func (r *queryResolver) WitnessNodes(ctx context.Context, height *int) ([]*gqlgen.WitnessNode, error) {
	panic(fmt.Errorf("not implemented: WitnessNodes - witnessNodes"))
}

// ActiveWitnessNodes is the resolver for the activeWitnessNodes field.
func (r *queryResolver) ActiveWitnessNodes(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: ActiveWitnessNodes - activeWitnessNodes"))
}

// WitnessSchedule is the resolver for the witnessSchedule field.
func (r *queryResolver) WitnessSchedule(ctx context.Context, height *int) (*string, error) {
	panic(fmt.Errorf("not implemented: WitnessSchedule - witnessSchedule"))
}

// NextWitnessSlot is the resolver for the nextWitnessSlot field.
func (r *queryResolver) NextWitnessSlot(ctx context.Context, self *bool) (*string, error) {
	panic(fmt.Errorf("not implemented: NextWitnessSlot - nextWitnessSlot"))
}

// WitnessActiveScore is the resolver for the witnessActiveScore field.
func (r *queryResolver) WitnessActiveScore(ctx context.Context, height *int) (*string, error) {
	panic(fmt.Errorf("not implemented: WitnessActiveScore - witnessActiveScore"))
}

// MockGenerateElection is the resolver for the mockGenerateElection field.
func (r *queryResolver) MockGenerateElection(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: MockGenerateElection - mockGenerateElection"))
}

// AnchorProducer is the resolver for the anchorProducer field.
func (r *queryResolver) AnchorProducer(ctx context.Context) (*gqlgen.AnchorProducer, error) {
	panic(fmt.Errorf("not implemented: AnchorProducer - anchorProducer"))
}

// Query returns gqlgen.QueryResolver implementation.
func (r *Resolver) Query() gqlgen.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
