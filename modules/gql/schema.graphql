scalar JSON

type JsonPatchOp {
  op: String
  path: String
  value: JSON
}

type Contract {
  id: String
  code: String
  creation_ts: String
}

enum TransactionStatus {
  UNCONFIRMED
  CONFIRMED
  FAILED
  INCLUDED
  PROCESSED
}

enum TransactionType {
  NULL
  INPUT
  OUTPUT
  VIRTUAL
  CORE
}

type Transaction {
  id: String!
  status: String!
  headers: Headers
  required_auths: [Auth!]
  data: TransactionData
  sig_hash: String
  src: String
  first_seen: String
  local: Boolean
  accessible: Boolean
  anchored_block: String
  anchored_height: Int
  anchored_id: String
  anchored_index: Int
  anchored_op_index: Int
  output: TransactionOutput
}

type Headers {
  nonce: Int
}

type Auth {
  value: String!
}

type TransactionData {
  op: String!
  action: String
  payload: JSON
  contract_id: String
}

type TransactionOutput {
  index: Int
  id: String
}

type ContractOutput {
  id: String!
  anchored_block: String
  anchored_height: Int
  anchored_id: String
  anchored_index: Int
  contract_id: String
  gas: Gas
  inputs: [String!]!
  results: [JSON]!
  side_effects: JSON
  state_merkle: String
}

type Gas {
  IO: Int
}

type ContractDiff {
  diff: JSON
  previousContractStateId: String!
}

type ContractState {
  id: String
  state(key: String): JSON
  stateQuery(key: String, query: JSON): JSON
  stateKeys(key: String): JSON
  state_merkle: String
}

type FindContractResult {
  status: String
}

type TransactionSubmitResult {
  id: String
}

type AccountNonceResult {
  nonce: Int
}

type AccountInfoResult {
  rc_max: Int
  rc_current: Int
}

type LocalNodeInfo {
  peer_id: String
  did: String
}

type PostingJsonKeys {
  ct: String
  t: String
  key: String
}

type Witness {
  account: String
  height: Uint64!
  did_keys: [PostingJsonKeys!]!
  enabled: Boolean
  git_commit: String
  net_id: String
  peer_id: String
  protocol_version: Uint64!
  ts: String
  tx_id: String
  version_id: String
  gateway_key: String
}

type WitnessSlot {
  account: String
  bn: Uint64!
}

interface BalanceController {
  type: BalanceControllerType
  authority: String
  conditions: [BalanceAccessCondition]
}

enum BalanceControllerType {
  HIVE
  DID
  CONTRACT
}

interface BalanceAccessCondition {
  type: BalanceAccessConditionType
  value: String
}

enum BalanceAccessConditionType {
  TIME
  HASH
  WITHDRAW
}

interface DepositDrain {
  deposit_id: String
  amount: Float
  token: String
  owner: String
}

interface BlockRef {
  block_ref: String
  included_block: Int
}

type BalanceRecord {
  account: String
  block_height: Uint64!
  hbd: Int64!
  hbd_avg: Int64!
  hbd_modify: Uint64!
  hbd_claim: Uint64!
  hbd_savings: Int64!
  hive: Int64!
  hive_consensus: Int64!
}

type FindTransactionResult {
  txs: [Transaction]
}

type FindContractOutputResult {
  outputs: [ContractOutput]
}

type AnchorProducer {
  nextSlot(account: String): JSON
}

type LedgerOp {
  id: String!
  amount: Int!
  block_height: Int!
  idx: Float!
  from: String
  memo: String
  owner: String!
  t: String!
  tk: String!
  status: String!
}

type LedgerResults {
  txs: [LedgerOp!]
}

type ElectionMember {
  key: String!
  account: String!
}

type ElectionResult {
  epoch: Uint64!
  net_id: String!
  type: String!
  data: String!
  members: [ElectionMember!]!
  weights: [Uint64!]!
  protocol_version: Uint64!
  total_weight: Uint64!
  block_height: Uint64!
  proposer: String!
  tx_id: String!
}

input LedgerTxFilter {
  byToFrom: String
  byTxId: String
  offset: Int
  limit: Int
}

input FindTransactionFilter {
  byId: String
  byAccount: String
  byContract: String
  byStatus: String
  byOpCategory: String
  byAction: String
  limit: Int
}

input FindContractOutputFilter {
  byInput: String
  byOutput: String
  byContract: String
  limit: Int
}

type Query {
  contractStateDiff(id: String): ContractDiff
  contractState(id: String): ContractState
  findTransaction(
    filterOptions: FindTransactionFilter
    decodedFilter: JSON
  ): FindTransactionResult
  findContractOutput(
    filterOptions: FindContractOutputFilter
    decodedFilter: JSON
  ): FindContractOutputResult
  findLedgerTXs(filterOptions: LedgerTxFilter): LedgerResults
  getAccountBalance(account: String!, height: Uint64): BalanceRecord
  findContract(id: String): FindContractResult
  submitTransactionV1(tx: String!, sig: String!): TransactionSubmitResult
  getAccountNonce(keyGroup: [String]!): AccountNonceResult
  localNodeInfo: LocalNodeInfo
  witnessNodes(height: Uint64!): [Witness!]!
  activeWitnessNodes: JSON
  witnessSchedule(height: Uint64!): [WitnessSlot!]!
  nextWitnessSlot(self: Boolean): JSON
  witnessActiveScore(height: Int): JSON
  mockGenerateElection: JSON
  anchorProducer: AnchorProducer
  getCurrentNumber: TestResult # TESTING QUERY
  witnessStake(account: String!): Uint64!
  getDagByCID(cidString: String!): JSON!
  getElection(epoch: Uint64!): ElectionResult
}

scalar Uint64
scalar Int64

type Mutation {
  incrementNumber: TestResult # TESTING MUTATION
}

# TESTING TYPE
type TestResult {
  currentNumber: Int
}
