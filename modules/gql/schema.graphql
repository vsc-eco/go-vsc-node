scalar JSON

type Contract {
  id: String
  code: String
  creation_ts: String
}

enum TransactionStatus {
  UNCONFIRMED
  CONFIRMED
  FAILED
  INCLUDED
  PROCESSED
}

enum Asset {
  hive
  hive_consensus
  hbd
  hbd_savings
}

type TransactionRecord {
  id: String!
  anchr_height: Uint64!
  anchr_index: Uint64!
  anchr_opidx: Uint64!
  anchr_ts: String!
  type: String!
  tx_id: String!
  data: Map
  first_seen: DateTime!
  nonce: Uint64!
  rc_limit: Uint64!
  required_auths: [String!]
  status: String!
  ledger: [OpLogEvent!]
}

type OpLogEvent {
  to: String!
  from: String!
  amount: Int64!
  asset: String!
  memo: String
  type: String!
  params: Map
}

type TransactionData {
  op: String!
  action: String
  payload: JSON
  contract_id: String
}

type TransactionOutput {
  index: Int
  id: String
}

type ContractOutput {
  id: String!
  anchored_block: String
  anchored_height: Int
  anchored_id: String
  anchored_index: Int
  contract_id: String
  gas: Gas
  inputs: [String!]!
  results: [JSON]!
  side_effects: JSON
  state_merkle: String
}

type Gas {
  IO: Int
}

type ContractDiff {
  diff: JSON
  previousContractStateId: String!
}

type ContractState {
  id: String
  state(key: String): JSON
  stateQuery(key: String, query: JSON): JSON
  stateKeys(key: String): JSON
  state_merkle: String
}

type FindContractResult {
  status: String
}

type TransactionSubmitResult {
  id: String
}

type NonceRecord {
  account: String!
  nonce: Uint64!
}

type LocalNodeInfo {
  version_id: String!
  git_commit: String!
  last_processed_block: Uint64!
  epoch: Uint64!
}

type PostingJsonKeys {
  ct: String
  t: String
  key: String
}

type Witness {
  account: String
  height: Uint64!
  did_keys: [PostingJsonKeys!]!
  enabled: Boolean
  git_commit: String
  net_id: String
  peer_id: String
  protocol_version: Uint64!
  ts: String
  tx_id: String
  version_id: String
  gateway_key: String
}

type WitnessSlot {
  account: String
  bn: Uint64!
}

type BalanceRecord {
  account: String
  block_height: Uint64!
  hbd: Int64!
  hbd_avg: Int64!
  hbd_modify: Uint64!
  hbd_claim: Uint64!
  hbd_savings: Int64!
  hive: Int64!
  hive_consensus: Int64!
  consensus_unstaking: Int64!
}

type RcRecord {
  account: String!
  amount: Int64!
  block_height: Uint64!
}

type FindContractOutputResult {
  outputs: [ContractOutput]
}

type LedgerRecord {
  id: String!
  amount: Int64!
  block_height: Uint64!
  timestamp: String!
  from: String!
  owner: String!
  type: String!
  asset: String!
  tx_id: String!
}

type ActionRecord {
  id: String!
  status: String!
  amount: Int64!
  asset: String!
  to: String!
  memo: String!
  action_id: String!
  type: String!
  params: Map
  block_height: Uint64!
  timestamp: String!
}

type ElectionMember {
  key: String!
  account: String!
}

type ElectionResult {
  epoch: Uint64!
  net_id: String!
  type: String!
  data: String!
  members: [ElectionMember!]!
  weights: [Uint64!]!
  protocol_version: Uint64!
  total_weight: Uint64!
  block_height: Uint64!
  proposer: String!
  tx_id: String!
}

input LedgerTxFilter {
  byToFrom: String
  byTxId: String
  byTypes: [String!]
  byAsset: Asset
  fromBlock: Uint64
  toBlock: Uint64
  offset: Int
  limit: Int
}

input LedgerActionsFilter {
  byTxId: String
  byActionId: String
  byAccount: String
  byTypes: [String!]
  byAsset: Asset
  byStatus: String
  fromBlock: Uint64
  toBlock: Uint64
  offset: Int
  limit: Int
}

input TransactionFilter {
  byId: String
  byIds: [String!]
  byAccount: String
  byContract: String
  byStatus: TransactionStatus
  byType: String
  byLedgerToFrom: String
  byLedgerTypes: [String!]
  offset: Int
  limit: Int
}

input FindContractOutputFilter {
  byInput: String
  byOutput: String
  byContract: String
  limit: Int
}

type Query {
  contractStateDiff(id: String): ContractDiff
  contractState(id: String): ContractState
  findTransaction(filterOptions: TransactionFilter): [TransactionRecord!]
  findContractOutput(
    filterOptions: FindContractOutputFilter
    decodedFilter: JSON
  ): FindContractOutputResult
  findLedgerTXs(filterOptions: LedgerTxFilter): [LedgerRecord!]
  findLedgerActions(filterOptions: LedgerActionsFilter): [ActionRecord!]
  getAccountBalance(account: String!, height: Uint64): BalanceRecord
  getAccountRC(account: String!, height: Uint64): RcRecord
  findContract(id: String): FindContractResult
  submitTransactionV1(tx: String!, sig: String!): TransactionSubmitResult
  getAccountNonce(account: String!): NonceRecord
  localNodeInfo: LocalNodeInfo
  getWitness(account: String!, height: Uint64): Witness
  witnessNodes(height: Uint64!): [Witness!]!
  witnessSchedule(height: Uint64!): [WitnessSlot!]!
  witnessStake(account: String!): Uint64!
  getDagByCID(cidString: String!): JSON!
  getElection(epoch: Uint64!): ElectionResult
}

scalar Uint64
scalar Int64
scalar Map
scalar DateTime
