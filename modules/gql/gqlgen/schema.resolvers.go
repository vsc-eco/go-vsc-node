package gqlgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"encoding/base64"
	"fmt"
	"math"
	"vsc-node/modules/db/vsc/contracts"
	"vsc-node/modules/db/vsc/elections"
	ledgerDb "vsc-node/modules/db/vsc/ledger"
	"vsc-node/modules/db/vsc/witnesses"
	"vsc-node/modules/gql/model"
	stateEngine "vsc-node/modules/state-processing"
	transactionpool "vsc-node/modules/transaction-pool"

	"github.com/ipfs/go-cid"
)

// BlockHeight is the resolver for the block_height field.
func (r *balanceRecordResolver) BlockHeight(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Uint64, error) {
	return model.Uint64(obj.BlockHeight), nil
}

// Hbd is the resolver for the hbd field.
func (r *balanceRecordResolver) Hbd(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Int64, error) {
	return model.Int64(obj.HBD), nil
}

// HbdAvg is the resolver for the hbd_avg field.
func (r *balanceRecordResolver) HbdAvg(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Int64, error) {
	return model.Int64(obj.HBD_AVG), nil
}

// HbdModify is the resolver for the hbd_modify field.
func (r *balanceRecordResolver) HbdModify(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Uint64, error) {
	return model.Uint64(obj.HBD_MODIFY_HEIGHT), nil
}

// HbdClaim is the resolver for the hbd_claim field.
func (r *balanceRecordResolver) HbdClaim(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Uint64, error) {
	return model.Uint64(obj.HBD_CLAIM_HEIGHT), nil
}

// HbdSavings is the resolver for the hbd_savings field.
func (r *balanceRecordResolver) HbdSavings(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Int64, error) {
	return model.Int64(obj.HBD_SAVINGS), nil
}

// Hive is the resolver for the hive field.
func (r *balanceRecordResolver) Hive(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Int64, error) {
	return model.Int64(obj.Hive), nil
}

// HiveConsensus is the resolver for the hive_consensus field.
func (r *balanceRecordResolver) HiveConsensus(ctx context.Context, obj *ledgerDb.BalanceRecord) (model.Int64, error) {
	return model.Int64(obj.HIVE_CONSENSUS), nil
}

// AnchoredBlock is the resolver for the anchored_block field.
func (r *contractOutputResolver) AnchoredBlock(ctx context.Context, obj *contracts.ContractOutput) (*string, error) {
	panic(fmt.Errorf("not implemented: AnchoredBlock - anchored_block"))
}

// AnchoredHeight is the resolver for the anchored_height field.
func (r *contractOutputResolver) AnchoredHeight(ctx context.Context, obj *contracts.ContractOutput) (*int, error) {
	panic(fmt.Errorf("not implemented: AnchoredHeight - anchored_height"))
}

// AnchoredID is the resolver for the anchored_id field.
func (r *contractOutputResolver) AnchoredID(ctx context.Context, obj *contracts.ContractOutput) (*string, error) {
	panic(fmt.Errorf("not implemented: AnchoredID - anchored_id"))
}

// AnchoredIndex is the resolver for the anchored_index field.
func (r *contractOutputResolver) AnchoredIndex(ctx context.Context, obj *contracts.ContractOutput) (*int, error) {
	panic(fmt.Errorf("not implemented: AnchoredIndex - anchored_index"))
}

// Gas is the resolver for the gas field.
func (r *contractOutputResolver) Gas(ctx context.Context, obj *contracts.ContractOutput) (*Gas, error) {
	panic(fmt.Errorf("not implemented: Gas - gas"))
}

// Results is the resolver for the results field.
func (r *contractOutputResolver) Results(ctx context.Context, obj *contracts.ContractOutput) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Results - results"))
}

// SideEffects is the resolver for the side_effects field.
func (r *contractOutputResolver) SideEffects(ctx context.Context, obj *contracts.ContractOutput) (*string, error) {
	panic(fmt.Errorf("not implemented: SideEffects - side_effects"))
}

// ID is the resolver for the id field.
func (r *contractStateResolver) ID(ctx context.Context, obj contracts.ContractState) (*string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// State is the resolver for the state field.
func (r *contractStateResolver) State(ctx context.Context, obj contracts.ContractState, key *string) (*string, error) {
	panic(fmt.Errorf("not implemented: State - state"))
}

// StateQuery is the resolver for the stateQuery field.
func (r *contractStateResolver) StateQuery(ctx context.Context, obj contracts.ContractState, key *string, query *string) (*string, error) {
	panic(fmt.Errorf("not implemented: StateQuery - stateQuery"))
}

// StateKeys is the resolver for the stateKeys field.
func (r *contractStateResolver) StateKeys(ctx context.Context, obj contracts.ContractState, key *string) (*string, error) {
	panic(fmt.Errorf("not implemented: StateKeys - stateKeys"))
}

// StateMerkle is the resolver for the state_merkle field.
func (r *contractStateResolver) StateMerkle(ctx context.Context, obj contracts.ContractState) (*string, error) {
	panic(fmt.Errorf("not implemented: StateMerkle - state_merkle"))
}

// Epoch is the resolver for the epoch field.
func (r *electionResultResolver) Epoch(ctx context.Context, obj *elections.ElectionResult) (model.Uint64, error) {
	return model.Uint64(obj.Epoch), nil
}

// Weights is the resolver for the weights field.
func (r *electionResultResolver) Weights(ctx context.Context, obj *elections.ElectionResult) ([]model.Uint64, error) {
	converted := make([]model.Uint64, len(obj.Weights))
	for i, v := range obj.Weights {
		converted[i] = model.Uint64(v)
	}
	return converted, nil
}

// ProtocolVersion is the resolver for the protocol_version field.
func (r *electionResultResolver) ProtocolVersion(ctx context.Context, obj *elections.ElectionResult) (model.Uint64, error) {
	return model.Uint64(obj.ProtocolVersion), nil
}

// TotalWeight is the resolver for the total_weight field.
func (r *electionResultResolver) TotalWeight(ctx context.Context, obj *elections.ElectionResult) (model.Uint64, error) {
	return model.Uint64(obj.TotalWeight), nil
}

// BlockHeight is the resolver for the block_height field.
func (r *electionResultResolver) BlockHeight(ctx context.Context, obj *elections.ElectionResult) (model.Uint64, error) {
	return model.Uint64(obj.BlockHeight), nil
}

// IncrementNumber is the resolver for the incrementNumber field.
func (r *mutationResolver) IncrementNumber(ctx context.Context) (*TestResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// Ct is the resolver for the ct field.
func (r *postingJsonKeysResolver) Ct(ctx context.Context, obj *witnesses.PostingJsonKeys) (*string, error) {
	return &obj.CryptoType, nil
}

// T is the resolver for the t field.
func (r *postingJsonKeysResolver) T(ctx context.Context, obj *witnesses.PostingJsonKeys) (*string, error) {
	return &obj.Type, nil
}

// ContractStateDiff is the resolver for the contractStateDiff field.
func (r *queryResolver) ContractStateDiff(ctx context.Context, id *string) (*ContractDiff, error) {
	panic(fmt.Errorf("not implemented"))
}

// ContractState is the resolver for the contractState field.
func (r *queryResolver) ContractState(ctx context.Context, id *string) (contracts.ContractState, error) {
	panic(fmt.Errorf("not implemented"))
}

// FindTransaction is the resolver for the findTransaction field.
func (r *queryResolver) FindTransaction(ctx context.Context, filterOptions *FindTransactionFilter, decodedFilter *string) (*FindTransactionResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// FindContractOutput is the resolver for the findContractOutput field.
func (r *queryResolver) FindContractOutput(ctx context.Context, filterOptions *FindContractOutputFilter, decodedFilter *string) (*FindContractOutputResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// FindLedgerTXs is the resolver for the findLedgerTXs field.
func (r *queryResolver) FindLedgerTXs(ctx context.Context, filterOptions *LedgerTxFilter) (*LedgerResults, error) {
	panic(fmt.Errorf("not implemented"))
}

// GetAccountBalance is the resolver for the getAccountBalance field.
func (r *queryResolver) GetAccountBalance(ctx context.Context, account string, height *model.Uint64) (*ledgerDb.BalanceRecord, error) {
	if account == "" {
		return nil, fmt.Errorf("Account parameter cannot be empty")
	}
	var blockHeight uint64
	if height != nil {
		blockHeight = uint64(*height)
	} else {
		head, headErr := r.HiveBlocks.GetLastProcessedBlock()
		if headErr != nil {
			return nil, headErr
		}
		blockHeight = head
	}
	return r.Balances.GetBalanceRecord(account, blockHeight)
}

// FindContract is the resolver for the findContract field.
func (r *queryResolver) FindContract(ctx context.Context, id *string) (*FindContractResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// SubmitTransactionV1 is the resolver for the submitTransactionV1 field.
func (r *queryResolver) SubmitTransactionV1(ctx context.Context, tx string, sig string) (*TransactionSubmitResult, error) {
	Tx, err := base64.URLEncoding.DecodeString(tx)
	if err != nil {
		return nil, err
	}
	Sig, err := base64.URLEncoding.DecodeString(sig)
	if err != nil {
		return nil, err
	}
	cid, err := r.TxPool.IngestTx(transactionpool.SerializedVSCTransaction{
		Tx,
		Sig,
	})
	if err != nil {
		return nil, err
	}
	id := cid.String()
	return &TransactionSubmitResult{
		ID: &id,
	}, nil
}

// GetAccountNonce is the resolver for the getAccountNonce field.
func (r *queryResolver) GetAccountNonce(ctx context.Context, keyGroup []*string) (*AccountNonceResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// LocalNodeInfo is the resolver for the localNodeInfo field.
func (r *queryResolver) LocalNodeInfo(ctx context.Context) (*LocalNodeInfo, error) {
	panic(fmt.Errorf("not implemented"))
}

// WitnessNodes is the resolver for the witnessNodes field.
func (r *queryResolver) WitnessNodes(ctx context.Context, height model.Uint64) ([]witnesses.Witness, error) {
	return r.Witnesses.GetWitnessesAtBlockHeight(uint64(height))
}

// ActiveWitnessNodes is the resolver for the activeWitnessNodes field.
func (r *queryResolver) ActiveWitnessNodes(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented"))
}

// WitnessSchedule is the resolver for the witnessSchedule field.
func (r *queryResolver) WitnessSchedule(ctx context.Context, height model.Uint64) ([]stateEngine.WitnessSlot, error) {
	slotInfo := stateEngine.CalculateSlotInfo(uint64(height))
	schedule := r.StateEngine.GetSchedule(slotInfo.StartHeight)
	return schedule, nil
}

// NextWitnessSlot is the resolver for the nextWitnessSlot field.
func (r *queryResolver) NextWitnessSlot(ctx context.Context, self *bool) (*string, error) {
	panic(fmt.Errorf("not implemented"))
}

// WitnessActiveScore is the resolver for the witnessActiveScore field.
func (r *queryResolver) WitnessActiveScore(ctx context.Context, height *int) (*string, error) {
	panic(fmt.Errorf("not implemented"))
}

// MockGenerateElection is the resolver for the mockGenerateElection field.
func (r *queryResolver) MockGenerateElection(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented"))
}

// AnchorProducer is the resolver for the anchorProducer field.
func (r *queryResolver) AnchorProducer(ctx context.Context) (*AnchorProducer, error) {
	panic(fmt.Errorf("not implemented"))
}

// GetCurrentNumber is the resolver for the getCurrentNumber field.
func (r *queryResolver) GetCurrentNumber(ctx context.Context) (*TestResult, error) {
	panic(fmt.Errorf("not implemented"))
}

// WitnessStake is the resolver for the witnessStake field.
func (r *queryResolver) WitnessStake(ctx context.Context, account string) (model.Uint64, error) {
	res, err := r.Balances.GetBalanceRecord(account, uint64(math.MaxInt64))
	if err != nil {
		return 0, err
	}
	if res == nil {
		return 0, nil
	}
	return model.Uint64(res.HIVE_CONSENSUS), nil
}

// GetDagByCid is the resolver for the getDagByCID field.
func (r *queryResolver) GetDagByCid(ctx context.Context, cidString string) (string, error) {
	blockCid, parseErr := cid.Parse(cidString)
	if parseErr != nil {
		return "", parseErr
	}
	node, nodeErr := r.Da.GetDag(blockCid)
	if nodeErr != nil {
		return "", nodeErr
	}
	jsonBytes, jsonErr := node.MarshalJSON()
	if jsonErr != nil {
		return "", jsonErr
	}
	return string(jsonBytes), nil
}

// GetElection is the resolver for the getElection field.
func (r *queryResolver) GetElection(ctx context.Context, epoch model.Uint64) (*elections.ElectionResult, error) {
	result := r.Elections.GetElection(uint64(epoch))
	if result == nil {
		return nil, fmt.Errorf("election not found or error occurred for epoch %d", uint64(epoch))
	}
	return result, nil
}

// Height is the resolver for the height field.
func (r *witnessResolver) Height(ctx context.Context, obj *witnesses.Witness) (model.Uint64, error) {
	return model.Uint64(obj.Height), nil
}

// ProtocolVersion is the resolver for the protocol_version field.
func (r *witnessResolver) ProtocolVersion(ctx context.Context, obj *witnesses.Witness) (model.Uint64, error) {
	return model.Uint64(obj.ProtocolVersion), nil
}

// Bn is the resolver for the bn field.
func (r *witnessSlotResolver) Bn(ctx context.Context, obj *stateEngine.WitnessSlot) (model.Uint64, error) {
	return model.Uint64(obj.SlotHeight), nil
}

// BalanceRecord returns BalanceRecordResolver implementation.
func (r *Resolver) BalanceRecord() BalanceRecordResolver { return &balanceRecordResolver{r} }

// ContractOutput returns ContractOutputResolver implementation.
func (r *Resolver) ContractOutput() ContractOutputResolver { return &contractOutputResolver{r} }

// ContractState returns ContractStateResolver implementation.
func (r *Resolver) ContractState() ContractStateResolver { return &contractStateResolver{r} }

// ElectionResult returns ElectionResultResolver implementation.
func (r *Resolver) ElectionResult() ElectionResultResolver { return &electionResultResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// PostingJsonKeys returns PostingJsonKeysResolver implementation.
func (r *Resolver) PostingJsonKeys() PostingJsonKeysResolver { return &postingJsonKeysResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Witness returns WitnessResolver implementation.
func (r *Resolver) Witness() WitnessResolver { return &witnessResolver{r} }

// WitnessSlot returns WitnessSlotResolver implementation.
func (r *Resolver) WitnessSlot() WitnessSlotResolver { return &witnessSlotResolver{r} }

type balanceRecordResolver struct{ *Resolver }
type contractOutputResolver struct{ *Resolver }
type contractStateResolver struct{ *Resolver }
type electionResultResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postingJsonKeysResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type witnessResolver struct{ *Resolver }
type witnessSlotResolver struct{ *Resolver }
